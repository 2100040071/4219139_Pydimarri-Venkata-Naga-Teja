#include <assert.h>
#include <ctype.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
char* readline();
char* ltrim(char*);
char* rtrim(char*);
char** split_string(char*);
int parse_int(char*);
int equalStacks(int lenA, int* stackA, int lenB, int* stackB, int lenC, int* stackC) {
    int sumA = 0, sumB = 0, sumC = 0;
    for (int i = 0; i < lenA; i++) sumA += stackA[i];
    for (int i = 0; i < lenB; i++) sumB += stackB[i];
    for (int i = 0; i < lenC; i++) sumC += stackC[i];
    int idxA = 0, idxB = 0, idxC = 0;
    while (true) {
        if (idxA == lenA || idxB == lenB || idxC == lenC)
            return 0;
        if (sumA == sumB && sumB == sumC)
            return sumA;
        if (sumA >= sumB && sumA >= sumC)
            sumA -= stackA[idxA++];
        else if (sumB >= sumA && sumB >= sumC)
            sumB -= stackB[idxB++];
        else
            sumC -= stackC[idxC++];
    }
}
int main() {
    FILE* fptr = fopen(getenv("OUTPUT_PATH"), "w");
    char** first_line = split_string(rtrim(readline()));
    int size1 = parse_int(*(first_line + 0));
    int size2 = parse_int(*(first_line + 1));
    int size3 = parse_int(*(first_line + 2));
    char** temp1 = split_string(rtrim(readline()));
    int* arr1 = malloc(size1 * sizeof(int));
    for (int i = 0; i < size1; i++) {
        arr1[i] = parse_int(*(temp1 + i));
    }
    char** temp2 = split_string(rtrim(readline()));
    int* arr2 = malloc(size2 * sizeof(int));
    for (int i = 0; i < size2; i++) {
        arr2[i] = parse_int(*(temp2 + i));
    }
    char** temp3 = split_string(rtrim(readline()));
    int* arr3 = malloc(size3 * sizeof(int));
    for (int i = 0; i < size3; i++) {
        arr3[i] = parse_int(*(temp3 + i));
    }
    int result = equalStacks(size1, arr1, size2, arr2, size3, arr3);
    fprintf(fptr, "%d\n", result);
    fclose(fptr);
    return 0;
}
char* readline() {
    size_t alloc_length = 1024;
    size_t data_length = 0;
    char* data = malloc(alloc_length);
    while (true) {
        char* cursor = data + data_length;
        char* line = fgets(cursor, alloc_length - data_length, stdin);
        if (!line) break;
        data_length += strlen(cursor);
        if (data_length < alloc_length - 1 || data[data_length - 1] == '\n') break;
        alloc_length <<= 1;
        data = realloc(data, alloc_length);
        if (!data) {
            data = '\0';
            break;
        }
    }
    if (data[data_length - 1] == '\n') {
        data[data_length - 1] = '\0';
        data = realloc(data, data_length);
        if (!data) data = '\0';
    } else {
        data = realloc(data, data_length + 1);
        if (!data) data = '\0';
        else data[data_length] = '\0';
    }
    return data;
}
char* ltrim(char* str) {
    if (!str) return '\0';
    if (!*str) return str;
    while (*str != '\0' && isspace(*str)) str++;
    return str;
}
char* rtrim(char* str) {
    if (!str) return '\0';
    if (!*str) return str;
    char* end = str + strlen(str) - 1;
    while (end >= str && isspace(*end)) end--;
    *(end + 1) = '\0';
    return str;
}
char** split_string(char* str) {
    char** splits = NULL;
    char* token = strtok(str, " ");
    int count = 0;
    while (token) {
        splits = realloc(splits, sizeof(char*) * ++count);
        if (!splits) return splits;
        splits[count - 1] = token;
        token = strtok(NULL, " ");
    }
    return splits;
}
int parse_int(char* str) {
    char* endptr;
    int value = strtol(str, &endptr, 10);
    if (endptr == str || *endptr != '\0') exit(EXIT_FAILURE);
    return value;
}
