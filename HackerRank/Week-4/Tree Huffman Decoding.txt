#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_NODES 512
#define ASCII_RANGE 256

typedef struct TreeNode {
    char symbol;
    int weight;
    struct TreeNode* left;
    struct TreeNode* right;
} TreeNode;

typedef struct {
    TreeNode* arr[MAX_NODES];
    int count;
} MinHeap;

TreeNode* createNode(char symbol, int weight) {
    TreeNode* newNode = malloc(sizeof(TreeNode));
    newNode->symbol = symbol;
    newNode->weight = weight;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

void swapNodes(TreeNode** a, TreeNode** b) {
    TreeNode* tmp = *a;
    *a = *b;
    *b = tmp;
}

void minHeapify(MinHeap* heap, int idx) {
    int smallest = idx;
    int left = 2 * idx + 1;
    int right = 2 * idx + 2;

    if (left < heap->count && heap->arr[left]->weight < heap->arr[smallest]->weight)
        smallest = left;
    if (right < heap->count && heap->arr[right]->weight < heap->arr[smallest]->weight)
        smallest = right;

    if (smallest != idx) {
        swapNodes(&heap->arr[smallest], &heap->arr[idx]);
        minHeapify(heap, smallest);
    }
}

TreeNode* extractMin(MinHeap* heap) {
    TreeNode* minNode = heap->arr[0];
    heap->arr[0] = heap->arr[heap->count - 1];
    heap->count--;
    minHeapify(heap, 0);
    return minNode;
}

void insertHeap(MinHeap* heap, TreeNode* node) {
    heap->count++;
    int i = heap->count - 1;
    heap->arr[i] = node;

    while (i && heap->arr[(i - 1) / 2]->weight > heap->arr[i]->weight) {
        swapNodes(&heap->arr[i], &heap->arr[(i - 1) / 2]);
        i = (i - 1) / 2;
    }
}

MinHeap* buildHeapFromFreq(int freq[ASCII_RANGE]) {
    MinHeap* heap = malloc(sizeof(MinHeap));
    heap->count = 0;
    for (int i = 0; i < ASCII_RANGE; i++) {
        if (freq[i] > 0) {
            insertHeap(heap, createNode((char)i, freq[i]));
        }
    }
    return heap;
}

TreeNode* buildHuffmanTree(int freq[ASCII_RANGE]) {
    MinHeap* heap = buildHeapFromFreq(freq);

    while (heap->count > 1) {
        TreeNode* left = extractMin(heap);
        TreeNode* right = extractMin(heap);

        TreeNode* merged = createNode('\0', left->weight + right->weight);
        merged->left = left;
        merged->right = right;

        insertHeap(heap, merged);
    }

    TreeNode* root = extractMin(heap);
    free(heap);
    return root;
}

void generateCodes(TreeNode* root, char* buffer, int depth, char codes[ASCII_RANGE][ASCII_RANGE]) {
    if (!root) return;

    if (!root->left && !root->right) {
        buffer[depth] = '\0';
        strcpy(codes[(unsigned char)root->symbol], buffer);
        return;
    }

    buffer[depth] = '0';
    generateCodes(root->left, buffer, depth + 1, codes);

    buffer[depth] = '1';
    generateCodes(root->right, buffer, depth + 1, codes);
}

void encodeText(char* text, char codes[ASCII_RANGE][ASCII_RANGE], char* result) {
    result[0] = '\0';
    for (int i = 0; text[i]; i++) {
        strcat(result, codes[(unsigned char)text[i]]);
    }
}

void decodeHuffman(TreeNode* root, char* encoded) {
    TreeNode* curr = root;
    for (int i = 0; encoded[i] != '\0'; i++) {
        curr = (encoded[i] == '0') ? curr->left : curr->right;

        if (!curr->left && !curr->right) {
            printf("%c", curr->symbol);
            curr = root;
        }
    }
    printf("\n");
}

void freeTree(TreeNode* root) {
    if (!root) return;
    freeTree(root->left);
    freeTree(root->right);
    free(root);
}

int main() {
    char input[1024];
    fgets(input, sizeof(input), stdin);
    input[strcspn(input, "\n")] = 0;

    int freq[ASCII_RANGE] = {0};
    for (int i = 0; input[i]; i++) {
        freq[(unsigned char)input[i]]++;
    }

    TreeNode* root = buildHuffmanTree(freq);

    char codes[ASCII_RANGE][ASCII_RANGE] = {{0}};
    char buffer[ASCII_RANGE];
    generateCodes(root, buffer, 0, codes);

    char encoded[8192];
    encodeText(input, codes, encoded);

    decodeHuffman(root, encoded);

    freeTree(root);
    return 0;
}
